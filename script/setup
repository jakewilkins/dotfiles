#!/bin/bash

set -e

SCRIPT_SETUP="$0"
SETUP_DIRECTORY=$(dirname $SCRIPT_SETUP)

cd $SETUP_DIRECTORY/..
DOTFILES_PATH=$(pwd -P)

FILES_TO_SYMLINK=(config gemrc pryrc tmux tmux.conf)

function symlink_without_overwriting() {
	local source_path=$1
	local destination_path=$2

	if [ -d "$source_path" ]; then
		file_type="directory"
		same_type_flag="-d"
		wrong_type_flag="-f"
	else
		file_type="file"
		same_type_flag="-f"
		wrong_type_flag="-d"
	fi

	if [ $wrong_type_flag "$destination_path" ]; then
		echo "$destination_path already exists and is not a $file_type, please figure out what you want done with that and re-run this script."
		exit 1
	elif [ $same_type_flag "$destination_path" ]; then
		if [ -L "$destination_path" ]; then
			destination=$(readlink $destination_path)
			if [ "$destination" = "$source_path" ]; then
				echo "$source_path is already symlinked to $destination"
			else
				echo "$destination_path exists as a symlink to something else, please figure out what you want done with that and re-run this script."
				exit 1
			fi
		else
			echo "$destination_path exists as a regular $file_type, please figure out what you want done with that and re-run this script."
			exit 1
		fi
	else
		ln -sfv $source_path $destination_path
	fi
}

# If the config directory already exists, then just symlink all of
# the contents instead.
if [ -L "${HOME}/.config" ]; then
	destination=$(readlink "${HOME}/.config")
	if [ "$destination" = "$DOTFILES_PATH/config" ]; then
		echo "config dir is already symlinked to dotfiles."
		unset FILES_TO_SYMLINK[0]
	else
		echo "config dir is symlinked to something else, figure that out and re-run this script."
		exit 1
	fi
elif [ -d "${HOME}/.config" ]; then
	for CONFIG_FILE in $DOTFILES_PATH/config/*; do
		destination_path="$HOME/.config/$(basename $CONFIG_FILE)"
		symlink_without_overwriting $CONFIG_FILE $destination_path
	done


	# Remove config from list since we've symlinked the contents.
	unset FILES_TO_SYMLINK[0]
fi

for FILE in "${FILES_TO_SYMLINK[@]}"; do
	source_path="${DOTFILES_PATH}/${FILE}"
	dest_path="${HOME}/.${FILE}"
	symlink_without_overwriting $source_path $dest_path
done

[ $(uname -s) = "Linux" ] && export LINUX=1
[ $(uname -s) = "Darwin" ] && export DARWIN=1

if [ $LINUX ]; then
	apt-get update -y && apt-get install -y build-essential procps curl file git
fi

if hash brew 2>/dev/null; then
	echo "Brew is installed"
else
	echo installing brew?
	CI=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

	if [ $LINUX ]; then
		echo 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"' >> "${HOME}/.profile"
		eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
	fi
fi

echo "Installing global brew dependencies"

if [ $CODESPACES ]; then
	brew bundle --file ./homebrew/Brewfile.codespaces
else
	brew bundle --file ./homebrew/Brewfile

	if [ $LINUX ]; then
		echo "Installing Linux dependencies"
		brew bundle --file homebrew/Brewfile.linux
	elif [ $DARWIN ]; then
		echo "Installing Darwin dependencies"
		brew bundle --file homebrew/Brewfile.darwin
	fi
fi

if [ ! -f "$HOME/.fzf.zsh" ]; then
	$(brew --prefix)/opt/fzf/install --all --key-bindings --completion --no-update --no-fish --no-bash
fi

[ ! -f "$HOME/.z" ] && touch "$HOME/.z"

# Bring in all of our submodule dependencies
echo "Installing Git submodules"
git submodule init && git submodule update --depth 5

# Codespaces has a .gitconfig already setup, but in order to take advantage of
# the attributes set in /etc/gitconfig we have to explicitly include the path.
if [ $CODESPACES ]; then
	git config --global include.path /etc/gitconfig
fi

if [ $CODESPACES ]; then
	ln -fs "$DOTFILES_PATH/zshrc" "$HOME/.zshrc"
else
	symlink_without_overwriting "$DOTFILES_PATH/zshrc" "$HOME/.zshrc"
fi

echo "Installing vim plugins"
nvim --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'

echo "Symlinking dotfiles dir"
ln -fs "$DOTFILES_PATH" "$HOME/.dotfiles"

if [ $LINUX ]; then
	echo "Symlinking linux specific files"
	ln -fs "$(pwd)/zshrc.linux" "$(pwd)/system.zshrc"
	ln -fs "$(pwd)/p10k.zsh.linux" "$HOME/.p10k.zsh"
elif [ $DARWIN ]; then
	echo "Symlinking darwin specific files"
	ln -fs "$(pwd)/zshrc.darwin" "$(pwd)/system.zshrc"
	ln -fs "$(pwd)/p10k.zsh.darwin" "$HOME/.p10k.zsh"
fi

if [ "$SHELL" != "/bin/zsh" ]; then
	echo "Switching shell to zsh"
	sudo chsh -s $(which zsh)
fi
