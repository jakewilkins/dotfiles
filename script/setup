#!/bin/bash

set -e

SCRIPT_SETUP="$0"
SETUP_DIRECTORY=$(dirname $SCRIPT_SETUP)

cd $SETUP_DIRECTORY/..
DOTFILES_PATH=$(pwd -P)

FILES_TO_SYMLINK=(config gemrc pryrc tmux tmux.conf)

DOTFILES_FOLDER_IS_READONLY=$DEVCONTAINER_STANDALONE

if [ $DOTFILES_FOLDER_IS_READONLY ]; then
	echo "Copying dotfiles cache since dotfiles is readonly"
	cp -r "$DOTFILES_PATH" "$HOME/.dotfiles"
	DOTFILES_PATH="$HOME/.dotfiles"
else
	echo "Symlinking dotfiles dir"
	ln -fs "$DOTFILES_PATH" "$HOME/.dotfiles"
fi

function symlink_without_overwriting() {
	local source_path=$1
	local destination_path=$2

	if [ -d "$source_path" ]; then
		file_type="directory"
		same_type_flag="-d"
		wrong_type_flag="-f"
	else
		file_type="file"
		same_type_flag="-f"
		wrong_type_flag="-d"
	fi

	if [ $wrong_type_flag "$destination_path" ]; then
		echo "$destination_path already exists and is not a $file_type, please figure out what you want done with that and re-run this script."
		exit 1
	elif [ $same_type_flag "$destination_path" ]; then
		if [ -L "$destination_path" ]; then
			destination=$(readlink $destination_path)
			if [ "$destination" = "$source_path" ]; then
				echo "$source_path is already symlinked to $destination"
			else
				echo "$destination_path exists as a symlink to something else, please figure out what you want done with that and re-run this script."
				exit 1
			fi
		else
			echo "$destination_path exists as a regular $file_type, please figure out what you want done with that and re-run this script."
			exit 1
		fi
	else
		ln -sfv $source_path $destination_path
	fi
}


if [  -z "$DEVCONTAINER_STANDALONE" ]; then
	# Bring in all of our submodule dependencies
	echo "Installing Git submodules"
	git submodule init && git submodule update --depth 5
else
	# Force linking individual files instead of .config dir
	mkdir -p ~/.config
	CODESPACES=true;
fi

# If the config directory already exists, then just symlink all of
# the contents instead.
if [ -L "${HOME}/.config" ]; then
	destination=$(readlink "${HOME}/.config")
	if [ "$destination" = "$DOTFILES_PATH/config" ]; then
		echo "config dir is already symlinked to dotfiles."
		unset FILES_TO_SYMLINK[0]
	else
		echo "config dir is symlinked to something else, figure that out and re-run this script."
		exit 1
	fi
elif [ -d "${HOME}/.config" ]; then
	for CONFIG_FILE in $DOTFILES_PATH/config/*; do
		destination_path="$HOME/.config/$(basename $CONFIG_FILE)"
		symlink_without_overwriting $CONFIG_FILE $destination_path
	done


	# Remove config from list since we've symlinked the contents.
	unset FILES_TO_SYMLINK[0]
fi

# We want ~/.config/git to be writable so make a copy
if [ ! -z "$DEVCONTAINER_STANDALONE" ]; then
	# rm  "$HOME/.config/git"
	# mkdir "$HOME/.config/git"
	# cp "$DOTFILES_PATH/config/git/config" "$HOME/.config/git"
	echo "don't think this is necessary anymore"
fi
for FILE in "${FILES_TO_SYMLINK[@]}"; do
	source_path="${DOTFILES_PATH}/${FILE}"
	dest_path="${HOME}/.${FILE}"
	symlink_without_overwriting $source_path $dest_path
done

symlink_without_overwriting "$DOTFILES_PATH/bin" "$HOME/bin"

[ $(uname -s) = "Linux" ] && export LINUX=1
[ $(uname -s) = "Darwin" ] && export DARWIN=1

if [ $CODESPACES ]; then
	ln -fs "$DOTFILES_PATH/zshrc" "$HOME/.zshrc"
else
	symlink_without_overwriting "$DOTFILES_PATH/zshrc" "$HOME/.zshrc"
fi

hash git-credential-github-keychain 2>/dev/null || {
	./script/install-git-credential-helper
}

if [ $LINUX ]; then
	echo "Symlinking linux specific files"

	if [ ! -f "/usr/local/lib/z.sh" ]; then
		echo "Download z.sh"
		wget https://raw.githubusercontent.com/rupa/z/master/z.sh -O ~/z.sh
		sudo mv ~/z.sh /usr/local/lib/z.sh
	fi

	if [ ! $DEVCONTAINER_STANDALONE ]; then
		ln -fs "$(pwd)/zshrc.linux" "$(pwd)/system.zshrc"
		ln -fs "$HOME/.config/github-keychain/default-config.linux.toml" "$HOME/.config/github-keychain/default-config.toml"
	else
		ln -fs "$HOME/.config/github-keychain/default-config.github-codespaces.toml" "$HOME/.config/github-keychain/default-config.toml"

		ln -fs "$HOME/.config/p10k/p10k.zsh.codespaces" "$HOME/.p10k.zsh"
	fi

	if [ $CODESPACES ]; then
		sudo git config -f /etc/gitconfig --replace-all credential.helper "$HOME/bin/git-credential-github-keychain"
		sudo git config -f /etc/gitconfig credential.useHttpPath true
		ln -fs "$HOME/.config/github-keychain/default-config.github-codespace.toml" "$HOME/.config/github-keychain/default-config.toml"
		ln -fs "$HOME/.config/p10k/p10k.zsh.codespaces" "$HOME/.p10k.zsh"
	else
		ln -fs "$HOME/.config/p10k/p10k.zsh.linux" "$HOME/.p10k.zsh"
	fi
elif [ $DARWIN ]; then
	echo "Symlinking darwin specific files"
	ln -fs "$(pwd)/zshrc.darwin" "$(pwd)/system.zshrc"
	ln -fs "$HOME/.config/p10k/p10k.zsh.darwin" "$HOME/.p10k.zsh"
	ln -fs "$HOME/.config/github-keychain/default-config.darwin.toml" "$HOME/.config/github-keychain/default-config.toml"
fi

if [ "$SHELL" != "/bin/zsh" ]; then
	echo "Switching shell to zsh"
	sudo chsh -s $(which zsh) $USER
fi

if [ $LINUX ]; then
	echo "Installing Linux build essentials"
	sudo apt-get update -y && sudo apt-get install -y build-essential procps curl file git
fi

[ ! $CODESPACES ] && ./script/install-brew-dependencies

[ ! -f "$HOME/.z" ] && touch "$HOME/.z"

# Codespaces has a .gitconfig already setup, but in order to take advantage of
# the attributes set in /etc/gitconfig we have to explicitly include the path.
if [ $CODESPACES ]; then
	git config --global include.path /etc/gitconfig
fi

hash nvim 2>/dev/null && {
	echo "Installing vim plugins"
	nvim --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'
}

echo "Done"

